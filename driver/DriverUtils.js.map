{"version":3,"sources":["../../src/driver/DriverUtils.ts"],"names":[],"mappings":"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","file":"DriverUtils.js","sourcesContent":["import { Driver } from \"./Driver\";\nimport { hash } from \"../util/StringUtils\";\nimport { OracleDriver } from \"./oracle/OracleDriver\";\n\n/**\n * Common driver utility functions.\n */\nexport class DriverUtils {\n    // -------------------------------------------------------------------------\n    // Public Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Normalizes and builds a new driver options.\n     * Extracts settings from connection url and sets to a new options object.\n     */\n    static buildDriverOptions(\n        options: any,\n        buildOptions?: { useSid: boolean }\n    ): any {\n        if (options.url) {\n            const parsedUrl = this.parseConnectionUrl(options.url);\n            let urlDriverOptions: any = {\n                type: parsedUrl.type,\n                host: parsedUrl.host,\n                username: parsedUrl.username,\n                password: parsedUrl.password,\n                port: parsedUrl.port,\n                database: parsedUrl.database\n            };\n            if (buildOptions && buildOptions.useSid) {\n                urlDriverOptions.sid = parsedUrl.database;\n            }\n            return Object.assign({}, options, urlDriverOptions);\n        }\n        return Object.assign({}, options);\n    }\n\n    /**\n     * Builds column alias from given alias name and column name.\n     * If alias length is greater than the limit (if any) allowed by the current\n     * driver, replaces it with a hashed string.\n     *\n     * @param driver Current `Driver`.\n     * @param alias Alias part.\n     * @param column Name of the column to be concatened to `alias`. (Optional)\n     *\n     * @return An alias allowing to select/transform the target `column`.\n     */\n    static buildColumnAlias(\n        { maxAliasLength }: Driver,\n        alias: string,\n        column?: string,\n        options?: { extraNeededLength?: number }\n    ): string {\n        const columnAliasName =\n            column && column.length > 0 ? alias + \"_\" + column : alias;\n\n        const extraNeededLength = (options || {}).extraNeededLength;\n        if (maxAliasLength && extraNeededLength && extraNeededLength > 0) {\n            maxAliasLength = maxAliasLength - extraNeededLength;\n        }\n\n        if (\n            maxAliasLength &&\n            maxAliasLength > 0 &&\n            columnAliasName.length > maxAliasLength\n        ) {\n            // Hack Julien:\n            // The first char needs to be a letter. OtherWise it gives an error for the parameters (e.g: :3451hsd)\n            return (\n                columnAliasName[0] +\n                (maxAliasLength > 1\n                    ? hash(columnAliasName, { length: maxAliasLength - 1 })\n                    : \"\")\n            );\n        }\n\n        return columnAliasName;\n    }\n\n    /**\n     * Build a parameter and a list of values for a 'IN' clause for Oracle.\n     * This will allow more than 1000 items in the list of values for the IN clause.\n     */\n    static buildParamAndValuesForInClause(\n        driver: Driver,\n        origParam: string,\n        origValues: any[]\n    ): { param: string; values: any[] } {\n        let param: string = origParam;\n        let values = origValues;\n\n        if (driver instanceof OracleDriver && values.length > 1000) {\n            param = `(1, ${param})`;\n            values = values.map(v => `(1, ${v})`);\n        }\n\n        return { param, values };\n    }\n\n    // -------------------------------------------------------------------------\n    // Private Static Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Extracts connection data from the connection url.\n     */\n    private static parseConnectionUrl(url: string) {\n        const type = url.split(\":\")[0];\n        const firstSlashes = url.indexOf(\"//\");\n        const preBase = url.substr(firstSlashes + 2);\n        const secondSlash = preBase.indexOf(\"/\");\n        const base =\n            secondSlash !== -1 ? preBase.substr(0, secondSlash) : preBase;\n        const afterBase =\n            secondSlash !== -1 ? preBase.substr(secondSlash + 1) : undefined;\n\n        const lastAtSign = base.lastIndexOf(\"@\");\n        const usernameAndPassword = base.substr(0, lastAtSign);\n        const hostAndPort = base.substr(lastAtSign + 1);\n\n        let username = usernameAndPassword;\n        let password = \"\";\n        const firstColon = usernameAndPassword.indexOf(\":\");\n        if (firstColon !== -1) {\n            username = usernameAndPassword.substr(0, firstColon);\n            password = usernameAndPassword.substr(firstColon + 1);\n        }\n        const [host, port] = hostAndPort.split(\":\");\n\n        return {\n            type: type,\n            host: host,\n            username: decodeURIComponent(username),\n            password: decodeURIComponent(password),\n            port: port ? parseInt(port) : undefined,\n            database: afterBase || undefined\n        };\n    }\n}\n"],"sourceRoot":".."}