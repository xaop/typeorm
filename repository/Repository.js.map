{"version":3,"sources":["../../src/repository/Repository.ts"],"names":[],"mappings":"","file":"Repository.js","sourcesContent":["import {DeepPartial} from \"../common/DeepPartial\";\nimport {ObjectLiteral} from \"../common/ObjectLiteral\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {EntityManager} from \"../entity-manager/EntityManager\";\nimport {FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport {EntityMetadata} from \"../metadata/EntityMetadata\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport * as Observable from \"zen-observable\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport type Repository<Entity extends ObjectLiteral> = {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity Manager used by this repository.\n     */\n    readonly manager: EntityManager;\n\n    /**\n     * Query runner provider used for this repository.\n     */\n    readonly queryRunner?: QueryRunner;\n\n    /**\n     * Returns object that is managed by this repository.\n     * If this repository manages entity from schema,\n     * then it returns a name of that schema instead.\n     */\n    readonly target: Function | string\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Entity metadata of the entity current repository manages.\n     */\n    getMetadata(): EntityMetadata;\n\n    /**\n     * Creates a new query builder that can be used to build a sql query.\n     */\n    createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity>\n\n    /**\n     * Checks if entity has an id.\n     * If entity composite compose ids, it will check them all.\n     */\n    hasId(entity: Entity): boolean\n\n    /**\n     * Gets entity mixed id.\n     */\n    getId(entity: Entity): any\n\n    /**\n     * Creates a new entity instance.\n     */\n    create(): Entity;\n\n    /**\n     * Creates a new entities and copies all entity properties from given objects into their new entities.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLikeArray: DeepPartial<Entity>[]): Entity[];\n\n    /**\n     * Creates a new entity instance and copies all entity properties from this object into a new entity.\n     * Note that it copies only properties that present in entity schema.\n     */\n    create(entityLike: DeepPartial<Entity>): Entity;\n\n    /**\n     * Merges multiple entities (or entity-like objects) into a given entity.\n     */\n    merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity\n\n    /**\n     * Creates a new entity from the given plan javascript object. If entity already exist in the database, then\n     * it loads it (and everything related to it), replaces all values with the new ones from the given object\n     * and returns this new entity. This new entity is actually a loaded from the db entity with all properties\n     * replaced from the new object.\n     *\n     * Note that given entity-like object must have an entity id / primary key to find entity by.\n     * Returns undefined if entity with given id was not found.\n     */\n    preload(entityLike: DeepPartial<Entity>): Promise<Entity|undefined>\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options: SaveOptions & { reload: false }): Promise<T[]>;\n\n    /**\n     * Saves all given entities in the database.\n     * If entities do not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entities: T[], options?: SaveOptions): Promise<(T & Entity)[]>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options: SaveOptions & { reload: false }): Promise<T>;\n\n    /**\n     * Saves a given entity in the database.\n     * If entity does not exist in the database then inserts, otherwise updates.\n     */\n    save<T extends DeepPartial<Entity>>(entity: T, options?: SaveOptions): Promise<T & Entity>;\n\n    /**\n     * Removes a given entities from the database.\n     */\n    remove(entities: Entity[], options?: RemoveOptions): Promise<Entity[]>;\n\n    /**\n     * Removes a given entity from the database.\n     */\n    remove(entity: Entity, options?: RemoveOptions): Promise<Entity>;\n\n    /**\n     * Inserts a given entity into the database.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient INSERT query.\n     * Does not check if entity exist in the database, so query will fail if duplicate entity is being inserted.\n     */\n    insert(entity: QueryDeepPartialEntity<Entity>|(QueryDeepPartialEntity<Entity>[])): Promise<InsertResult>\n\n    /**\n     * Updates entity partially. Entity can be found by a given conditions.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient UPDATE query.\n     * Does not check if entity exist in the database.\n     */\n    update(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult>\n\n    /**\n     * Deletes entities by a given criteria.\n     * Unlike save method executes a primitive operation without cascades, relations and other operations included.\n     * Executes fast and efficient DELETE query.\n     * Does not check if entity exist in the database.\n     */\n    delete(criteria: string|string[]|number|number[]|Date|Date[]|ObjectID|ObjectID[]|FindOptionsWhere<Entity>): Promise<DeleteResult>\n\n    /**\n     * Counts entities that match given options.\n     */\n    count(options?: FindOptions<Entity>): Promise<number>;\n\n    /**\n     * Counts entities that match given conditions.\n     */\n    count(conditions?: FindOptionsWhere<Entity>): Promise<number>;\n\n    /**\n     * Finds entities that match given options.\n     */\n    find(options?: FindOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions.\n     */\n    find(conditions?: FindOptionsWhere<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities that match given find options.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(options?: FindOptions<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities that match given conditions.\n     * Also counts all entities that match given conditions,\n     * but ignores pagination settings (from and take options).\n     */\n    findAndCount(conditions?: FindOptionsWhere<Entity>): Promise<[ Entity[], number ]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally find options can be applied.\n     */\n    findByIds(ids: any[], options?: FindOptions<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds entities by ids.\n     * Optionally conditions can be applied.\n     */\n    findByIds(ids: any[], conditions?: FindOptionsWhere<Entity>): Promise<Entity[]>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(id?: string|number|Date|ObjectID, options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOne(options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOne(conditions?: FindOptionsWhere<Entity>, options?: FindOptions<Entity>): Promise<Entity|undefined>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(id?: string|number|Date|ObjectID, options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given options.\n     */\n    findOneOrFail(options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds first entity that matches given conditions.\n     */\n    findOneOrFail(conditions?: FindOptionsWhere<Entity>, options?: FindOptions<Entity>): Promise<Entity>;\n\n    /**\n     * Finds entities that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observe<Entity>(options?: FindOptions<Entity>): Observable<Entity[]>;\n\n    /**\n     * Finds entities that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observe<Entity>(conditions?: FindOptionsWhere<Entity>): Observable<Entity[]>;\n\n    /**\n     * Finds entities and count that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeManyAndCount<Entity>(options?: FindOptions<Entity>): Observable<[Entity[], number]>;\n\n    /**\n     * Finds entities and count that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeManyAndCount<Entity>(conditions?: FindOptionsWhere<Entity>): Observable<[Entity[], number]>;\n\n    /**\n     * Finds entity that match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeOne<Entity>(options?: FindOptions<Entity>): Observable<Entity>;\n\n    /**\n     * Finds entity that match given conditions and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeOne<Entity>(conditions?: FindOptionsWhere<Entity>): Observable<Entity>;\n\n    /**\n     * Gets the entities count match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeCount<Entity>(options?: FindOptions<Entity>): Observable<number>;\n\n    /**\n     * Gets the entities count match given options and returns observable.\n     * Whenever new data appears that matches given query observable emits new value.\n     */\n    observeCount<Entity>(conditions?: FindOptionsWhere<Entity>): Observable<number>;\n\n    /**\n     * Executes a raw SQL query and returns a raw database results.\n     * Raw query execution is supported only by relational databases (MongoDB is not supported).\n     */\n    query(query: string, parameters?: any[]): Promise<any>\n\n    /**\n     * Clears all the data from the given table/collection (truncates/drops it).\n     *\n     * Note: this method uses TRUNCATE and may not work as you expect in transactions on some platforms.\n     * @see https://stackoverflow.com/a/5972738/925151\n     */\n    clear(): Promise<void>\n\n    /**\n     * Increments some column by provided value of the entities matched given conditions.\n     */\n    increment(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number|string): Promise<UpdateResult>\n\n    /**\n     * Decrements some column by provided value of the entities matched given conditions.\n     */\n    decrement(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number|string): Promise<UpdateResult>\n\n    /**\n     * Extends repository with provided functions.\n     */\n    extend<CustomRepository>(custom: CustomRepository & ThisType<Repository<Entity> & CustomRepository>): Repository<Entity> & CustomRepository\n\n};\n"],"sourceRoot":".."}