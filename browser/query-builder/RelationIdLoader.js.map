{"version":3,"sources":["../browser/src/query-builder/RelationIdLoader.ts"],"names":[],"mappings":"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","file":"RelationIdLoader.js","sourcesContent":["import { Connection, ObjectLiteral, SelectQueryBuilder } from \"../\";\nimport { ColumnMetadata } from \"../metadata/ColumnMetadata\";\nimport { RelationMetadata } from \"../metadata/RelationMetadata\";\nimport { DriverUtils } from \"../driver/DriverUtils\";\n\n/**\n * Loads relation ids for the given entities.\n */\nexport class RelationIdLoader {\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(private connection: Connection) {}\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids of the given entity or entities.\n     */\n    load(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral | ObjectLiteral[],\n        relatedEntityOrRelatedEntities?: ObjectLiteral | ObjectLiteral[]\n    ): Promise<any[]> {\n        const entities = Array.isArray(entityOrEntities)\n            ? entityOrEntities\n            : [entityOrEntities];\n        const relatedEntities = Array.isArray(relatedEntityOrRelatedEntities)\n            ? relatedEntityOrRelatedEntities\n            : relatedEntityOrRelatedEntities\n            ? [relatedEntityOrRelatedEntities]\n            : undefined;\n\n        // load relation ids depend of relation type\n        if (relation.isManyToMany) {\n            return this.loadForManyToMany(relation, entities, relatedEntities);\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            return this.loadForManyToOneAndOneToOneOwner(\n                relation,\n                entities,\n                relatedEntities\n            );\n        } else {\n            // if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            return this.loadForOneToManyAndOneToOneNotOwner(\n                relation,\n                entities,\n                relatedEntities\n            );\n        }\n    }\n\n    /**\n     * Loads relation ids of the given entities and groups them into the object with parent and children.\n     *\n     * todo: extract this method?\n     */\n    async loadManyToManyRelationIdsAndGroup<E1, E2>(\n        relation: RelationMetadata,\n        entitiesOrEntities: E1 | E1[],\n        relatedEntityOrEntities?: E2 | E2[],\n        queryBuilder?: SelectQueryBuilder<any>\n    ): Promise<{ entity: E1; related?: E2 | E2[] }[]> {\n        // console.log(\"relation:\", relation.propertyName);\n        // console.log(\"entitiesOrEntities\", entitiesOrEntities);\n        const isMany = relation.isManyToMany || relation.isOneToMany;\n        const entities: E1[] = Array.isArray(entitiesOrEntities)\n            ? entitiesOrEntities\n            : [entitiesOrEntities];\n\n        if (!relatedEntityOrEntities) {\n            relatedEntityOrEntities = await this.connection.relationLoader.load(\n                relation,\n                entitiesOrEntities,\n                undefined,\n                queryBuilder\n            );\n            if (!relatedEntityOrEntities.length)\n                return entities.map(entity => ({\n                    entity: entity,\n                    related: isMany ? [] : undefined\n                }));\n        }\n        // const relationIds = await this.load(relation, relatedEntityOrEntities!, entitiesOrEntities);\n        const relationIds = await this.load(\n            relation,\n            entitiesOrEntities,\n            relatedEntityOrEntities\n        );\n        // console.log(\"entities\", entities);\n        // console.log(\"relatedEntityOrEntities\", relatedEntityOrEntities);\n        // console.log(\"relationIds\", relationIds);\n\n        const relatedEntities: E2[] = Array.isArray(relatedEntityOrEntities)\n            ? relatedEntityOrEntities\n            : [relatedEntityOrEntities!];\n\n        let columns: ColumnMetadata[] = [],\n            inverseColumns: ColumnMetadata[] = [];\n        if (relation.isManyToManyOwner) {\n            columns = relation.junctionEntityMetadata!.inverseColumns.map(\n                column => column.referencedColumn!\n            );\n            inverseColumns = relation.junctionEntityMetadata!.ownerColumns.map(\n                column => column.referencedColumn!\n            );\n        } else if (relation.isManyToManyNotOwner) {\n            columns = relation.junctionEntityMetadata!.ownerColumns.map(\n                column => column.referencedColumn!\n            );\n            inverseColumns = relation.junctionEntityMetadata!.inverseColumns.map(\n                column => column.referencedColumn!\n            );\n        } else if (relation.isManyToOne || relation.isOneToOneOwner) {\n            columns = relation.joinColumns.map(\n                column => column.referencedColumn!\n            );\n            inverseColumns = relation.entityMetadata.primaryColumns;\n        } else if (relation.isOneToMany || relation.isOneToOneNotOwner) {\n            columns = relation.inverseRelation!.entityMetadata.primaryColumns;\n            inverseColumns = relation.inverseRelation!.joinColumns.map(\n                column => column.referencedColumn!\n            );\n        } else {\n        }\n\n        return entities.map(entity => {\n            const group: { entity: E1; related?: E2 | E2[] } = {\n                entity: entity,\n                related: isMany ? [] : undefined\n            };\n\n            const entityRelationIds = relationIds.filter(relationId => {\n                return inverseColumns.every(column => {\n                    // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n                    // return column.compareEntityValue(entity, relationId[column.entityMetadata.name + \"_\" + column.propertyAliasName]);\n                    const columnName = DriverUtils.buildColumnAlias(\n                        this.connection.driver,\n                        column.entityMetadata.name +\n                            \"_\" +\n                            column.propertyAliasName\n                    );\n\n                    return column.compareEntityValue(\n                        entity,\n                        relationId[columnName]\n                    );\n                });\n            });\n            if (!entityRelationIds.length) return group;\n\n            relatedEntities.forEach(relatedEntity => {\n                entityRelationIds.forEach(relationId => {\n                    const relatedEntityMatched = columns.every(column => {\n                        // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n                        // return column.compareEntityValue(relatedEntity, relationId[column.entityMetadata.name + \"_\" + relation.propertyPath.replace(\".\", \"_\") + \"_\" + column.propertyPath.replace(\".\", \"_\")]);\n                        const columnName = DriverUtils.buildColumnAlias(\n                            this.connection.driver,\n                            column.entityMetadata.name +\n                                \"_\" +\n                                relation.propertyPath.replace(\".\", \"_\") +\n                                \"_\" +\n                                column.propertyPath.replace(\".\", \"_\")\n                        );\n\n                        return column.compareEntityValue(\n                            relatedEntity,\n                            relationId[columnName]\n                        );\n                    });\n                    if (relatedEntityMatched) {\n                        if (isMany) {\n                            (group.related as E2[]).push(relatedEntity);\n                        } else {\n                            group.related = relatedEntity;\n                        }\n                    }\n                });\n            });\n            return group;\n        });\n    }\n\n    /**\n     * Loads relation ids of the given entities and maps them into the given entity property.\n\n    async loadManyToManyRelationIdsAndMap(\n        relation: RelationMetadata,\n        entityOrEntities: ObjectLiteral|ObjectLiteral[],\n        mapToEntityOrEntities: ObjectLiteral|ObjectLiteral[],\n        propertyName: string\n    ): Promise<void> {\n\n        const relationIds = await this.loadManyToManyRelationIds(relation, entityOrEntities, mapToEntityOrEntities);\n        const mapToEntities = Array.isArray(mapToEntityOrEntities) ? mapToEntityOrEntities : [mapToEntityOrEntities];\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning ? junctionMetadata.inverseColumns : junctionMetadata.ownerColumns;\n        const inverseColumns = relation.isOwning ? junctionMetadata.ownerColumns : junctionMetadata.inverseColumns;\n\n        mapToEntities.forEach(mapToEntity => {\n            mapToEntity[propertyName] = [];\n            relationIds.forEach(relationId => {\n                const match = inverseColumns.every(column => {\n                    return column.referencedColumn!.getEntityValue(mapToEntity) === relationId[mainAlias + \"_\" + column.propertyName];\n                });\n                if (match) {\n                    if (columns.length === 1) {\n                        mapToEntity[propertyName].push(relationId[mainAlias + \"_\" + columns[0].propertyName]);\n\n                    } else {\n                        const value = {};\n                        columns.forEach(column => {\n                            column.referencedColumn!.setEntityValue(value, relationId[mainAlias + \"_\" + column.propertyName]);\n                        });\n                        mapToEntity[propertyName].push(value);\n                    }\n                }\n            });\n        });\n    }*/\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Loads relation ids for the many-to-many relation.\n     */\n    protected loadForManyToMany(\n        relation: RelationMetadata,\n        entities: ObjectLiteral[],\n        relatedEntities?: ObjectLiteral[]\n    ) {\n        const junctionMetadata = relation.junctionEntityMetadata!;\n        const mainAlias = junctionMetadata.name;\n        const columns = relation.isOwning\n            ? junctionMetadata.ownerColumns\n            : junctionMetadata.inverseColumns;\n        const inverseColumns = relation.isOwning\n            ? junctionMetadata.inverseColumns\n            : junctionMetadata.ownerColumns;\n        const qb = this.connection.createQueryBuilder();\n\n        // select all columns from junction table\n        columns.forEach(column => {\n            let columnName =\n                column.referencedColumn!.entityMetadata.name +\n                \"_\" +\n                column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n        inverseColumns.forEach(column => {\n            let columnName =\n                column.referencedColumn!.entityMetadata.name +\n                \"_\" +\n                relation.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add conditions for the given entities\n        let condition1 = \"\";\n        if (columns.length === 1) {\n            const values = entities.map(entity =>\n                columns[0].referencedColumn!.getEntityValue(entity)\n            );\n            const areAllNumbers = values.every(\n                value => typeof value === \"number\"\n            );\n\n            const paramAndValues = DriverUtils.buildParamAndValuesForInClause(\n                this.connection.driver,\n                `${mainAlias}.${columns[0].propertyPath}`,\n                values\n            );\n            if (areAllNumbers) {\n                condition1 = `${\n                    paramAndValues.param\n                } IN (${paramAndValues.values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values1\", paramAndValues.values);\n                condition1 = paramAndValues.values + \" IN (:...values1)\"; // todo: use ANY for postgres\n            }\n        } else {\n            condition1 =\n                \"(\" +\n                entities\n                    .map((entity, entityIndex) => {\n                        return columns\n                            .map(column => {\n                                const paramName =\n                                    \"entity1_\" +\n                                    entityIndex +\n                                    \"_\" +\n                                    column.propertyName;\n                                qb.setParameter(\n                                    paramName,\n                                    column.referencedColumn!.getEntityValue(\n                                        entity\n                                    )\n                                );\n                                return (\n                                    mainAlias +\n                                    \".\" +\n                                    column.propertyPath +\n                                    \" = :\" +\n                                    paramName\n                                );\n                            })\n                            .join(\" AND \");\n                    })\n                    .map(condition => \"(\" + condition + \")\")\n                    .join(\" OR \") +\n                \")\";\n        }\n\n        // add conditions for the given inverse entities\n        let condition2 = \"\";\n        if (relatedEntities) {\n            if (inverseColumns.length === 1) {\n                const values = relatedEntities.map(entity =>\n                    inverseColumns[0].referencedColumn!.getEntityValue(entity)\n                );\n                const areAllNumbers = values.every(\n                    value => typeof value === \"number\"\n                );\n\n                const paramAndValues = DriverUtils.buildParamAndValuesForInClause(\n                    this.connection.driver,\n                    `${mainAlias}.${inverseColumns[0].propertyPath}`,\n                    values\n                );\n                if (areAllNumbers) {\n                    condition2 = `${\n                        paramAndValues.param\n                    } IN (${paramAndValues.values.join(\", \")})`;\n                } else {\n                    qb.setParameter(\"values2\", paramAndValues.values);\n                    condition2 = paramAndValues.param + \" IN (:...values2)\"; // todo: use ANY for postgres\n                }\n            } else {\n                condition2 =\n                    \"(\" +\n                    relatedEntities\n                        .map((entity, entityIndex) => {\n                            return inverseColumns\n                                .map(column => {\n                                    const paramName =\n                                        \"entity2_\" +\n                                        entityIndex +\n                                        \"_\" +\n                                        column.propertyName;\n                                    qb.setParameter(\n                                        paramName,\n                                        column.referencedColumn!.getEntityValue(\n                                            entity\n                                        )\n                                    );\n                                    return (\n                                        mainAlias +\n                                        \".\" +\n                                        column.propertyPath +\n                                        \" = :\" +\n                                        paramName\n                                    );\n                                })\n                                .join(\" AND \");\n                        })\n                        .map(condition => \"(\" + condition + \")\")\n                        .join(\" OR \") +\n                    \")\";\n            }\n        }\n\n        // qb.from(junctionMetadata.target, mainAlias)\n        //     .where(condition1 + (condition2 ? \" AND \" + condition2 : \"\"));\n        //\n        // // execute query\n        // const { values1, values2 } = qb.getParameters();\n        // console.log(`I can do it`, { values1, values2 });\n        // if (inverseColumns.length === 1 &&\n        //     columns.length === 1 &&\n        //     this.connection.driver instanceof SqliteDriver &&\n        //     (values1.length + values2.length) > 500 &&\n        //     values1.length === values2.length) {\n        //     console.log(`I can do it`);\n        //     return qb.getRawMany();\n        //\n        // } else {\n        //     return qb.getRawMany();\n        // }\n\n        // execute query\n        const condition = [condition1, condition2]\n            .filter(v => v.length > 0)\n            .join(\" AND \");\n        return qb\n            .from(junctionMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the many-to-one and one-to-one owner relations.\n     */\n    protected loadForManyToOneAndOneToOneOwner(\n        relation: RelationMetadata,\n        entities: ObjectLiteral[],\n        relatedEntities?: ObjectLiteral[]\n    ) {\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // console.log(\"entitiesx\", entities);\n        // console.log(\"relatedEntitiesx\", relatedEntities);\n        const hasAllJoinColumnsInEntity = relation.joinColumns.every(\n            joinColumn => {\n                return !!relation.entityMetadata.nonVirtualColumns.find(\n                    column => column === joinColumn\n                );\n            }\n        );\n        if (relatedEntities && hasAllJoinColumnsInEntity) {\n            let relationIdMaps: ObjectLiteral[] = [];\n            entities.forEach(entity => {\n                let relationIdMap: ObjectLiteral = {};\n                relation.entityMetadata.primaryColumns.forEach(\n                    primaryColumn => {\n                        const key =\n                            primaryColumn.entityMetadata.name +\n                            \"_\" +\n                            primaryColumn.propertyPath.replace(\".\", \"_\");\n                        relationIdMap[key] = primaryColumn.getEntityValue(\n                            entity\n                        );\n                    }\n                );\n\n                relatedEntities.forEach(relatedEntity => {\n                    relation.joinColumns.forEach(joinColumn => {\n                        const entityColumnValue = joinColumn.getEntityValue(\n                            entity\n                        );\n                        const relatedEntityColumnValue = joinColumn.referencedColumn!.getEntityValue(\n                            relatedEntity\n                        );\n                        if (\n                            entityColumnValue === undefined ||\n                            relatedEntityColumnValue === undefined\n                        )\n                            return;\n\n                        if (entityColumnValue === relatedEntityColumnValue) {\n                            const key =\n                                joinColumn.referencedColumn!.entityMetadata\n                                    .name +\n                                \"_\" +\n                                relation.propertyPath.replace(\".\", \"_\") +\n                                \"_\" +\n                                joinColumn.referencedColumn!.propertyPath.replace(\n                                    \".\",\n                                    \"_\"\n                                );\n                            relationIdMap[key] = relatedEntityColumnValue;\n                        }\n                    });\n                });\n                if (\n                    Object.keys(relationIdMap).length ===\n                    relation.entityMetadata.primaryColumns.length +\n                        relation.joinColumns.length\n                ) {\n                    relationIdMaps.push(relationIdMap);\n                }\n            });\n            // console.log(\"relationIdMap\", relationIdMaps);\n            // console.log(\"entities.length\", entities.length);\n            if (relationIdMaps.length === entities.length)\n                return Promise.resolve(relationIdMaps);\n        }\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            let columnName =\n                primaryColumn.entityMetadata.name +\n                \"_\" +\n                primaryColumn.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(\n                mainAlias + \".\" + primaryColumn.propertyPath,\n                columnName\n            );\n        });\n        relation.joinColumns.forEach(column => {\n            let columnName =\n                column.referencedColumn!.entityMetadata.name +\n                \"_\" +\n                relation.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.entityMetadata.primaryColumns.length === 1) {\n            const values = entities.map(entity =>\n                relation.entityMetadata.primaryColumns[0].getEntityValue(entity)\n            );\n            const areAllNumbers = values.every(\n                value => typeof value === \"number\"\n            );\n\n            const paramAndValues = DriverUtils.buildParamAndValuesForInClause(\n                this.connection.driver,\n                `${mainAlias}.${relation.entityMetadata.primaryColumns[0].propertyPath}`,\n                values\n            );\n            if (areAllNumbers) {\n                condition = `${\n                    paramAndValues.param\n                } IN (${paramAndValues.values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values\", paramAndValues.values);\n                condition = paramAndValues.param + \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n        } else {\n            condition = entities\n                .map((entity, entityIndex) => {\n                    return relation.entityMetadata.primaryColumns\n                        .map((column, columnIndex) => {\n                            const paramName =\n                                \"entity\" + entityIndex + \"_\" + columnIndex;\n                            qb.setParameter(\n                                paramName,\n                                column.getEntityValue(entity)\n                            );\n                            return (\n                                mainAlias +\n                                \".\" +\n                                column.propertyPath +\n                                \" = :\" +\n                                paramName\n                            );\n                        })\n                        .join(\" AND \");\n                })\n                .map(condition => \"(\" + condition + \")\")\n                .join(\" OR \");\n        }\n\n        // execute query\n        return qb\n            .from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n\n    /**\n     * Loads relation ids for the one-to-many and one-to-one not owner relations.\n     */\n    protected loadForOneToManyAndOneToOneNotOwner(\n        relation: RelationMetadata,\n        entities: ObjectLiteral[],\n        relatedEntities?: ObjectLiteral[]\n    ) {\n        relation = relation.inverseRelation!;\n\n        if (\n            relation.entityMetadata.primaryColumns.length ===\n            relation.joinColumns.length\n        ) {\n            const sameReferencedColumns = relation.entityMetadata.primaryColumns.every(\n                column => {\n                    return relation.joinColumns.indexOf(column) !== -1;\n                }\n            );\n            if (sameReferencedColumns) {\n                return Promise.resolve(\n                    entities.map(entity => {\n                        const result: ObjectLiteral = {};\n                        relation.joinColumns.forEach(function(joinColumn) {\n                            const value = joinColumn.referencedColumn!.getEntityValue(\n                                entity\n                            );\n                            const joinColumnName =\n                                joinColumn.referencedColumn!.entityMetadata\n                                    .name +\n                                \"_\" +\n                                joinColumn.referencedColumn!.propertyPath.replace(\n                                    \".\",\n                                    \"_\"\n                                );\n                            const primaryColumnName =\n                                joinColumn.entityMetadata.name +\n                                \"_\" +\n                                relation.inverseRelation!.propertyPath.replace(\n                                    \".\",\n                                    \"_\"\n                                ) +\n                                \"_\" +\n                                joinColumn.propertyPath.replace(\".\", \"_\");\n                            result[joinColumnName] = value;\n                            result[primaryColumnName] = value;\n                        });\n                        return result;\n                    })\n                );\n            }\n        }\n\n        const mainAlias = relation.entityMetadata.targetName;\n\n        // select all columns we need\n        const qb = this.connection.createQueryBuilder();\n        relation.entityMetadata.primaryColumns.forEach(primaryColumn => {\n            let columnName =\n                primaryColumn.entityMetadata.name +\n                \"_\" +\n                relation.inverseRelation!.propertyPath.replace(\".\", \"_\") +\n                \"_\" +\n                primaryColumn.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(\n                mainAlias + \".\" + primaryColumn.propertyPath,\n                columnName\n            );\n        });\n        relation.joinColumns.forEach(column => {\n            let columnName =\n                column.referencedColumn!.entityMetadata.name +\n                \"_\" +\n                column.referencedColumn!.propertyPath.replace(\".\", \"_\");\n\n            // Hack Julien (Fix the parameter too long issue we have on oracle (limit is 30)\n            columnName = DriverUtils.buildColumnAlias(\n                this.connection.driver,\n                columnName\n            );\n\n            qb.addSelect(mainAlias + \".\" + column.propertyPath, columnName);\n        });\n\n        // add condition for entities\n        let condition: string = \"\";\n        if (relation.joinColumns.length === 1) {\n            const values = entities.map(entity =>\n                relation.joinColumns[0].referencedColumn!.getEntityValue(entity)\n            );\n            const areAllNumbers = values.every(\n                value => typeof value === \"number\"\n            );\n\n            const paramAndValues = DriverUtils.buildParamAndValuesForInClause(\n                this.connection.driver,\n                `${mainAlias}.${relation.joinColumns[0].propertyPath}`,\n                values\n            );\n            if (areAllNumbers) {\n                condition = `${\n                    paramAndValues.param\n                } IN (${paramAndValues.values.join(\", \")})`;\n            } else {\n                qb.setParameter(\"values\", paramAndValues.values);\n                condition = paramAndValues.param + \" IN (:...values)\"; // todo: use ANY for postgres\n            }\n        } else {\n            condition = entities\n                .map((entity, entityIndex) => {\n                    return relation.joinColumns\n                        .map((joinColumn, joinColumnIndex) => {\n                            const paramName =\n                                \"entity\" + entityIndex + \"_\" + joinColumnIndex;\n                            qb.setParameter(\n                                paramName,\n                                joinColumn.referencedColumn!.getEntityValue(\n                                    entity\n                                )\n                            );\n                            return (\n                                mainAlias +\n                                \".\" +\n                                joinColumn.propertyPath +\n                                \" = :\" +\n                                paramName\n                            );\n                        })\n                        .join(\" AND \");\n                })\n                .map(condition => \"(\" + condition + \")\")\n                .join(\" OR \");\n        }\n\n        // execute query\n        return qb\n            .from(relation.entityMetadata.target, mainAlias)\n            .where(condition)\n            .getRawMany();\n    }\n}\n"],"sourceRoot":".."}