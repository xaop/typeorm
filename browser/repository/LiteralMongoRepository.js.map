{"version":3,"sources":["../browser/src/repository/LiteralMongoRepository.ts"],"names":[],"mappings":"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","file":"LiteralMongoRepository.js","sourcesContent":["import {\n    AggregationCursor,\n    BulkWriteOpResultObject,\n    Code,\n    Collection,\n    CollectionAggregationOptions,\n    CollectionBulkWriteOptions,\n    CollectionInsertManyOptions,\n    CollectionInsertOneOptions,\n    CollectionOptions,\n    CollStats,\n    CommandCursor,\n    Cursor,\n    DeleteWriteOpResultObject,\n    FindAndModifyWriteOpResultObject,\n    FindOneAndReplaceOption,\n    GeoHaystackSearchOptions,\n    GeoNearOptions,\n    InsertOneWriteOpResult,\n    InsertWriteOpResult,\n    MapReduceOptions,\n    MongoCountPreferences,\n    MongodbIndexOptions,\n    ObjectID,\n    OrderedBulkOperation,\n    ParallelCollectionScanOptions,\n    ReadPreference,\n    ReplaceOneOptions,\n    UnorderedBulkOperation,\n    UpdateWriteOpResult\n} from \"../driver/mongodb/typings\";\nimport {FindExtraOptions, FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {EntityTarget, MongoEntityManager, ObjectLiteral} from \"..\";\nimport {createLiteralRepository} from \"./LiteralRepository\";\nimport {MongoRepository} from \"./MongoRepository\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport function createLiteralMongoRepository<Entity>({ manager, target, queryRunner }: {\n    manager: MongoEntityManager,\n    target: EntityTarget<Entity>,\n    queryRunner?: QueryRunner,\n}): MongoRepository<Entity> {\n    return {\n        ...createLiteralRepository({ manager, target, queryRunner }),\n\n        manager: manager,\n\n        query(query: string, parameters?: any[]): Promise<any> {\n            throw new Error(`Queries aren't supported by MongoDB.`);\n        },\n\n        createQueryBuilder(alias: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n            throw new Error(`Query Builder is not supported by MongoDB.`);\n        },\n\n        find(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.find(this.getMetadata().target, optionsOrConditions);\n        },\n\n        findAndCount(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<[Entity[], number]> {\n            return this.manager.findAndCount(this.getMetadata().target, optionsOrConditions);\n        },\n\n        findByIds(ids: any[], optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.findByIds(this.getMetadata().target, ids, optionsOrConditions);\n        },\n\n        findOne(optionsOrConditions?: string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity>, maybeOptions?: FindOptions<Entity>): Promise<Entity | undefined> {\n            return this.manager.findOne(this.getMetadata().target, optionsOrConditions as any, maybeOptions as any);\n        },\n\n        createCursor<T = any>(query?: ObjectLiteral): Cursor<T> {\n            return this.manager.createCursor(this.getMetadata().target, query);\n        },\n\n        createEntityCursor(query?: ObjectLiteral): Cursor<Entity> {\n            return this.manager.createEntityCursor(this.getMetadata().target, query);\n        },\n\n        aggregate<R = any>(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<R> {\n            return this.manager.aggregate(this.getMetadata().target, pipeline, options);\n        },\n\n        aggregateEntity(pipeline: ObjectLiteral[], options?: CollectionAggregationOptions): AggregationCursor<Entity> {\n            return this.manager.aggregateEntity(this.getMetadata().target, pipeline, options);\n        },\n\n        bulkWrite(operations: ObjectLiteral[], options?: CollectionBulkWriteOptions): Promise<BulkWriteOpResultObject> {\n            return this.manager.bulkWrite(this.getMetadata().target, operations, options);\n        },\n\n        count(query?: ObjectLiteral, options?: FindExtraOptions, mongoOptions?: MongoCountPreferences): Promise<number> {\n            return this.manager.count(this.getMetadata().target, query || {}, options, mongoOptions);\n        },\n\n        createCollectionIndex(fieldOrSpec: string | any, options?: MongodbIndexOptions): Promise<string> {\n            return this.manager.createCollectionIndex(this.getMetadata().target, fieldOrSpec, options);\n        },\n\n        createCollectionIndexes(indexSpecs: ObjectLiteral[]): Promise<void> {\n            return this.manager.createCollectionIndexes(this.getMetadata().target, indexSpecs);\n        },\n\n        deleteMany(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n            return this.manager.deleteMany(this.getMetadata().tableName, query, options);\n        },\n\n        deleteOne(query: ObjectLiteral, options?: CollectionOptions): Promise<DeleteWriteOpResultObject> {\n            return this.manager.deleteOne(this.getMetadata().tableName, query, options);\n        },\n\n        distinct(key: string, query: ObjectLiteral, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n            return this.manager.distinct(this.getMetadata().tableName, key, query, options);\n        },\n\n        dropCollectionIndex(indexName: string, options?: CollectionOptions): Promise<any> {\n            return this.manager.dropCollectionIndex(this.getMetadata().tableName, indexName, options);\n        },\n\n        dropCollectionIndexes(): Promise<any> {\n            return this.manager.dropCollectionIndexes(this.getMetadata().tableName);\n        },\n\n        findOneAndDelete(query: ObjectLiteral, options?: { projection?: Object, sort?: Object, maxTimeMS?: number }): Promise<FindAndModifyWriteOpResultObject> {\n            return this.manager.findOneAndDelete(this.getMetadata().tableName, query, options);\n        },\n\n        findOneAndReplace(query: ObjectLiteral, replacement: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n            return this.manager.findOneAndReplace(this.getMetadata().tableName, query, replacement, options);\n        },\n\n        findOneAndUpdate(query: ObjectLiteral, update: Object, options?: FindOneAndReplaceOption): Promise<FindAndModifyWriteOpResultObject> {\n            return this.manager.findOneAndUpdate(this.getMetadata().tableName, query, update, options);\n        },\n\n        geoHaystackSearch(x: number, y: number, options?: GeoHaystackSearchOptions): Promise<any> {\n            return this.manager.geoHaystackSearch(this.getMetadata().tableName, x, y, options);\n        },\n\n        geoNear(x: number, y: number, options?: GeoNearOptions): Promise<any> {\n            return this.manager.geoNear(this.getMetadata().tableName, x, y, options);\n        },\n\n        group(keys: Object | Array<any> | Function | Code, condition: Object, initial: Object, reduce: Function | Code, finalize: Function | Code, command: boolean, options?: { readPreference?: ReadPreference | string }): Promise<any> {\n            return this.manager.group(this.getMetadata().tableName, keys, condition, initial, reduce, finalize, command, options);\n        },\n\n        collectionIndexes(): Promise<any> {\n            return this.manager.collectionIndexes(this.getMetadata().tableName);\n        },\n\n        collectionIndexExists(indexes: string | string[]): Promise<boolean> {\n            return this.manager.collectionIndexExists(this.getMetadata().tableName, indexes);\n        },\n\n        collectionIndexInformation(options?: { full: boolean }): Promise<any> {\n            return this.manager.collectionIndexInformation(this.getMetadata().tableName, options);\n        },\n\n        initializeOrderedBulkOp(options?: CollectionOptions): OrderedBulkOperation {\n            return this.manager.initializeOrderedBulkOp(this.getMetadata().tableName, options);\n        },\n\n        initializeUnorderedBulkOp(options?: CollectionOptions): UnorderedBulkOperation {\n            return this.manager.initializeUnorderedBulkOp(this.getMetadata().tableName, options);\n        },\n\n        insertMany(docs: ObjectLiteral[], options?: CollectionInsertManyOptions): Promise<InsertWriteOpResult> {\n            return this.manager.insertMany(this.getMetadata().tableName, docs, options);\n        },\n\n        insertOne(doc: ObjectLiteral, options?: CollectionInsertOneOptions): Promise<InsertOneWriteOpResult> {\n            return this.manager.insertOne(this.getMetadata().tableName, doc, options);\n        },\n\n        isCapped(): Promise<any> {\n            return this.manager.isCapped(this.getMetadata().tableName);\n        },\n\n        listCollectionIndexes(options?: { batchSize?: number, readPreference?: ReadPreference | string }): CommandCursor {\n            return this.manager.listCollectionIndexes(this.getMetadata().tableName, options);\n        },\n\n        mapReduce(map: Function | string, reduce: Function | string, options?: MapReduceOptions): Promise<any> {\n            return this.manager.mapReduce(this.getMetadata().tableName, map, reduce, options);\n        },\n\n        parallelCollectionScan(options?: ParallelCollectionScanOptions): Promise<Cursor<Entity>[]> {\n            return this.manager.parallelCollectionScan(this.getMetadata().tableName, options);\n        },\n\n        reIndex(): Promise<any> {\n            return this.manager.reIndex(this.getMetadata().tableName);\n        },\n\n        rename(newName: string, options?: { dropTarget?: boolean }): Promise<Collection<any>> {\n            return this.manager.rename(this.getMetadata().tableName, newName, options);\n        },\n\n        replaceOne(query: ObjectLiteral, doc: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n            return this.manager.replaceOne(this.getMetadata().tableName, query, doc, options);\n        },\n\n        stats(options?: { scale: number }): Promise<CollStats> {\n            return this.manager.stats(this.getMetadata().tableName, options);\n        },\n\n        updateMany(query: ObjectLiteral, update: ObjectLiteral, options?: { upsert?: boolean, w?: any, wtimeout?: number, j?: boolean }): Promise<UpdateWriteOpResult> {\n            return this.manager.updateMany(this.getMetadata().tableName, query, update, options);\n        },\n\n        updateOne(query: ObjectLiteral, update: ObjectLiteral, options?: ReplaceOneOptions): Promise<UpdateWriteOpResult> {\n            return this.manager.updateOne(this.getMetadata().tableName, query, update, options);\n        }\n\n    };\n}\n"],"sourceRoot":".."}