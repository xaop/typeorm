{"version":3,"sources":["../browser/src/repository/LiteralRepository.ts"],"names":[],"mappings":"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","file":"LiteralRepository.js","sourcesContent":["import {DeepPartial} from \"../common/DeepPartial\";\nimport {ObjectID} from \"../driver/mongodb/typings\";\nimport {FindOptions, FindOptionsWhere} from \"../find-options/FindOptions\";\nimport {DeleteResult} from \"../query-builder/result/DeleteResult\";\nimport {UpdateResult} from \"../query-builder/result/UpdateResult\";\nimport {InsertResult} from \"../query-builder/result/InsertResult\";\nimport {QueryDeepPartialEntity} from \"../query-builder/QueryPartialEntity\";\nimport {SelectQueryBuilder} from \"../query-builder/SelectQueryBuilder\";\nimport {QueryRunner} from \"../query-runner/QueryRunner\";\nimport {RemoveOptions} from \"./RemoveOptions\";\nimport {SaveOptions} from \"./SaveOptions\";\nimport * as Observable from \"zen-observable\";\nimport {Repository} from \"./Repository\";\nimport {EntityManager} from \"..\";\nimport {EntityTarget} from \"../common/EntityTarget\";\n\n/**\n * Repository is supposed to work with your entity objects. Find entities, insert, update, delete, etc.\n */\nexport function createLiteralRepository<Entity>({ manager, target, queryRunner }: {\n    manager: EntityManager,\n    target: EntityTarget<Entity>,\n    queryRunner?: QueryRunner,\n}): Repository<Entity> {\n\n    return {\n        manager: manager,\n        queryRunner: queryRunner,\n        target: target as any, // todo: fix any later\n\n        getMetadata() {\n            return this.manager.connection.getMetadata(target);\n        },\n\n        createQueryBuilder(alias?: string, queryRunner?: QueryRunner): SelectQueryBuilder<Entity> {\n            return this.manager.createQueryBuilder(this.getMetadata().target as any, alias || this.getMetadata().targetName as any, queryRunner || this.queryRunner as any);\n        },\n\n        hasId(entity: Entity): boolean {\n            return this.manager.hasId(this.getMetadata().target, entity);\n        },\n\n        getId(entity: Entity): any {\n            return this.manager.getId(this.getMetadata().target, entity);\n        },\n\n        create(plainEntityLikeOrPlainEntityLikes?: any): any {\n            return this.manager.create(this.getMetadata().target as any, plainEntityLikeOrPlainEntityLikes as any);\n        },\n\n        merge(mergeIntoEntity: Entity, ...entityLikes: DeepPartial<Entity>[]): Entity {\n            return this.manager.merge(this.getMetadata().target as any, mergeIntoEntity, ...entityLikes);\n        },\n\n        preload(entityLike: DeepPartial<Entity>): Promise<Entity | undefined> {\n            return this.manager.preload(this.getMetadata().target as any, entityLike);\n        },\n\n        save<T extends DeepPartial<Entity>>(entityOrEntities: T | T[], options?: SaveOptions): Promise<T | T[]> {\n            return this.manager.save(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        remove(entityOrEntities: any, options?: RemoveOptions): Promise<any> {\n            return this.manager.remove(this.getMetadata().target as any, entityOrEntities as any, options);\n        },\n\n        insert(entity: QueryDeepPartialEntity<Entity> | (QueryDeepPartialEntity<Entity>[])): Promise<InsertResult> {\n            return this.manager.insert(this.getMetadata().target as any, entity);\n        },\n\n        update(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>, partialEntity: QueryDeepPartialEntity<Entity>): Promise<UpdateResult> {\n            return this.manager.update(this.getMetadata().target as any, criteria as any, partialEntity);\n        },\n\n        delete(criteria: string | string[] | number | number[] | Date | Date[] | ObjectID | ObjectID[] | FindOptionsWhere<Entity>): Promise<DeleteResult> {\n            return this.manager.delete(this.getMetadata().target as any, criteria as any);\n        },\n\n        count(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<number> {\n            return this.manager.count(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        find(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.find(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        findAndCount(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<[Entity[], number]> {\n            return this.manager.findAndCount(this.getMetadata().target as any, optionsOrConditions as any);\n        },\n\n        findByIds(ids: any[], optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Promise<Entity[]> {\n            return this.manager.findByIds(this.getMetadata().target as any, ids, optionsOrConditions as any);\n        },\n\n        findOne(optionsOrConditions?: string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity>, maybeOptions?: FindOptions<Entity>): Promise<Entity | undefined> {\n            return this.manager.findOne(this.getMetadata().target as any, optionsOrConditions as any, maybeOptions);\n        },\n\n        findOneOrFail(optionsOrConditions?: string | number | Date | ObjectID | FindOptions<Entity> | FindOptionsWhere<Entity>, maybeOptions?: FindOptions<Entity>): Promise<Entity> {\n            return this.manager.findOneOrFail(this.getMetadata().target as any, optionsOrConditions as any, maybeOptions);\n        },\n\n        observe<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<Entity[]> {\n            return this.manager.observe(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeManyAndCount<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<[Entity[], number]> {\n            return this.manager.observeManyAndCount(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeOne<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<Entity> {\n            return this.manager.observeOne(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        observeCount<Entity>(optionsOrConditions?: FindOptions<Entity> | FindOptionsWhere<Entity>): Observable<number> {\n            return this.manager.observeCount(this.getMetadata().target, optionsOrConditions as any);\n        },\n\n        query(query: string, parameters?: any[]): Promise<any> {\n            return this.manager.query(query, parameters);\n        },\n\n        clear(): Promise<void> {\n            return this.manager.clear(this.getMetadata().target);\n        },\n\n        increment(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n            return this.manager.increment(this.getMetadata().target as any, conditions, propertyPath, value);\n        },\n\n        decrement(conditions: FindOptionsWhere<Entity>, propertyPath: string, value: number | string): Promise<UpdateResult> {\n            return this.manager.decrement(this.getMetadata().target as any, conditions, propertyPath, value);\n        },\n\n        extend<CustomRepository>(custom: CustomRepository & ThisType<Repository<Entity> & CustomRepository>): Repository<Entity> & CustomRepository {\n            return {\n                ...this,\n                ...custom\n            };\n        }\n\n    };\n}\n"],"sourceRoot":".."}